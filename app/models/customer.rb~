require 'bcrypt'
class Customer < ActiveRecord::Base
  has_many :posts


  before_save :encrypt_password

  def encrypt_password
    #if password.present?
    self.password_salt = BCrypt::Engine.generate_salt
    self.password_hash = BCrypt::Engine.hash_secret(password, password_salt)
    #end
  end
  def self.authenticate(username,password)
    customer=find_by_username(username)

       if customer && customer.password_hash == BCrypt::Engine.hash_secret(password,customer.password_salt)
         customer
       else
         nil
       end
  end
  validates :fname, presence: true, format: { with: /[a-zA-Z]+/, message: "only allows letters" }
  validates :lname, presence: true, format: { with: /[a-zA-Z]+/,message: "only allows letters" }
  validates :username,presence: true, length: {in: 3..14,message: 'Username already exists'}, uniqueness: true,
             format: { with: /\A[a-zA-Z0-9]+\Z/, message: "allows only letters and number without any special characters and space" }
  validates :password, confirmation: true,length: {in: 6..14,message: 'atleast 6 characters'}
  validates :password_confirmation, presence: true
  validates :dob, :presence => {message: ':YYYY-MM-DD' }
  validates :gender, :presence => {message: ' :select your "GENDER"'}
  validates :mobile,presence: true,numericality: true, uniqueness: true,length: {minimum: 10, maximum: 10},
            format: {with: /\d{10}/}

end

